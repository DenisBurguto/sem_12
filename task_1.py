# –ó–∞–¥–∞–Ω–∏–µ No1
# üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞–µÃà—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.
from collections import OrderedDict


class Factorial:
    def __init__(self, k: int):
        self._k = k
        self._storage = OrderedDict()

    def __call__(self, number: int):
        if number not in self._storage:
            result = 1
            for i in range(1, number + 1):
                result *= i
                if len(self._storage) <= self._k:
                    self._storage[number] = result
                else:
                    self._storage.popitem(last=False)
                    self._storage[number] = result
            return result
        return self._storage[number]

    def get_previous_value(self, res=''):
        for num, fact in self._storage.items():
            res += ''.join(f'called_num = {num} and factorial = {fact} \n')
        print(res)
        return res


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    factorial = Factorial(5)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(factorial(5))
    print(factorial(8))
    print(factorial(9))
    print(factorial(12))
    print(factorial(14))
    print(factorial(11))
    print(factorial(8))

    factorial.get_previous_value()
